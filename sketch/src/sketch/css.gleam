//// Every CSS properties, pseudo-classes & pseudo-elements are defined here.
////
//// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS)

import gleam/float
import gleam/int
import gleam/list
import gleam/string
import sketch/css/media.{type Query}
import sketch/css/size.{type Size}
import sketch/css/transform.{type Transform}
import sketch/internals/cache/cache as style

/// Represents a Style. It can be a class composition, a media query with its
/// sub-properties, a pseudo-selector with its sub-properties or a property
/// directly.
pub type Style =
  style.Style

/// Represents a CSS class, computed.
pub type Class =
  style.Class

/// Generates a CSS class, with an autogenerated class selector. \
/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/Class_selectors)
pub fn class(styles: List(Style)) -> Class {
  style.class(styles)
}

// Properties
// All the properties accessible for the user.
// All properties must have a low-level String interface.

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/accent-color)
pub fn accent_color(value: String) -> Style {
  property("accent-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/align-content)
pub fn align_content(align: String) -> Style {
  property("align-content", align)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/align-items)
pub fn align_items(align: String) -> Style {
  property("align-items", align)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/align-self)
pub fn align_self(align: String) -> Style {
  property("align-self", align)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/align-tracks)
pub fn align_tracks(align: String) -> Style {
  property("align-tracks", align)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/all)
pub fn all(value: String) -> Style {
  property("all", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation)
pub fn animation(animation: String) -> Style {
  property("animation", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-composition)
pub fn animation_composition(animation: String) -> Style {
  property("animation-composition", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
pub fn animation_delay(animation: String) -> Style {
  property("animation-delay", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
pub fn animation_direction(animation: String) -> Style {
  property("animation-direction", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
pub fn animation_duration(animation: String) -> Style {
  property("animation-duration", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
pub fn animation_fill_mode(animation: String) -> Style {
  property("animation-fill-mode", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
pub fn animation_iteration_count(animation: String) -> Style {
  property("animation-iteration-count", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-name)
pub fn animation_name(animation: String) -> Style {
  property("animation-name", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
pub fn animation_play_state(animation: String) -> Style {
  property("animation-play-state", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
pub fn animation_timing_function(animation: String) -> Style {
  property("animation-timing-function", animation)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/appearance)
pub fn appearance(appearance: String) -> Style {
  property("appearance", appearance)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio)
pub fn aspect_ratio(aspect_ratio: String) -> Style {
  property("aspect-ratio", aspect_ratio)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter)
pub fn backdrop_filter(value: String) -> Style {
  property("backdrop-filter", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
pub fn backface_visibility(value: String) -> Style {
  property("backface-visibility", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background)
pub fn background(background: String) -> Style {
  property("background", background)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-attachment)
pub fn background_attachment(value: String) -> Style {
  property("background-attachment", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode)
pub fn background_blend_mode(value: String) -> Style {
  property("background-blend-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-clip)
pub fn background_clip(value: String) -> Style {
  property("background-clip", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-color)
pub fn background_color(value: String) -> Style {
  property("background-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-image)
pub fn background_image(value: String) -> Style {
  property("background-image", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-origin)
pub fn background_origin(value: String) -> Style {
  property("background-origin", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-position)
pub fn background_position(value: String) -> Style {
  property("background-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-position-x)
pub fn background_position_x(value: String) -> Style {
  property("background-position-x", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-position-y)
pub fn background_position_y(value: String) -> Style {
  property("background-position-y", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-repeat)
pub fn background_repeat(value: String) -> Style {
  property("background-repeat", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/background-size)
pub fn background_size(background: String) -> Style {
  property("background-size", background)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/block-size)
pub fn block_size(value: Size) -> Style {
  property("block-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/block-size)
pub fn block_size_(value: String) -> Style {
  property("block-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border)
pub fn border(border: String) -> Style {
  property("border", border)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block)
pub fn border_block(value: String) -> Style {
  property("border-block", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-color)
pub fn border_block_color(value: String) -> Style {
  property("border-block-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-end)
pub fn border_block_end(value: String) -> Style {
  property("border-block-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color)
pub fn border_block_end_color(value: String) -> Style {
  property("border-block-end-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style)
pub fn border_block_end_style(value: String) -> Style {
  property("border-block-end-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)
pub fn border_block_end_width(value: Size) -> Style {
  property("border-block-end-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)
pub fn border_block_end_width_(value: String) -> Style {
  property("border-block-end-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-start)
pub fn border_block_start(value: String) -> Style {
  property("border-block-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color)
pub fn border_block_start_color(value: String) -> Style {
  property("border-block-start-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style)
pub fn border_block_start_style(value: String) -> Style {
  property("border-block-start-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)
pub fn border_block_start_width(value: Size) -> Style {
  property("border-block-start-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)
pub fn border_block_start_width_(value: String) -> Style {
  property("border-block-start-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-style)
pub fn border_block_style(value: String) -> Style {
  property("border-block-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-width)
pub fn border_block_width(value: Size) -> Style {
  property("border-block-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-block-width)
pub fn border_block_width_(value: String) -> Style {
  property("border-block-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom)
pub fn border_bottom(value: String) -> Style {
  property("border-bottom", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color)
pub fn border_bottom_color(value: String) -> Style {
  property("border-bottom-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
pub fn border_bottom_left_radius(border_bottom_left_radius: Size) -> Style {
  size.to_string(border_bottom_left_radius)
  |> property("border-bottom-left-radius", _)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
pub fn border_bottom_left_radius_(border_bottom_left_radius: String) -> Style {
  property("border-bottom-left-radius", border_bottom_left_radius)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
pub fn border_bottom_right_radius(border_bottom_right_radius: Size) -> Style {
  size.to_string(border_bottom_right_radius)
  |> property("border-bottom-right-radius", _)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
pub fn border_bottom_right_radius_(border_bottom_right_radius: String) -> Style {
  property("border-bottom-right-radius", border_bottom_right_radius)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style)
pub fn border_bottom_style(value: String) -> Style {
  property("border-bottom-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)
pub fn border_bottom_width(value: Size) -> Style {
  property("border-bottom-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)
pub fn border_bottom_width_(value: String) -> Style {
  property("border-bottom-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-collapse)
pub fn border_collapse(value: String) -> Style {
  property("border-collapse", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-color)
pub fn border_color(value: String) -> Style {
  property("border-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius)
pub fn border_end_end_radius(value: String) -> Style {
  property("border-end-end-radius", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius)
pub fn border_end_start_radius(value: String) -> Style {
  property("border-end-start-radius", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image)
pub fn border_image(value: String) -> Style {
  property("border-image", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)
pub fn border_image_outset(value: Size) -> Style {
  property("border-image-outset", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)
pub fn border_image_outset_(value: String) -> Style {
  property("border-image-outset", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat)
pub fn border_image_repeat(value: String) -> Style {
  property("border-image-repeat", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-slice)
pub fn border_image_slice(value: String) -> Style {
  property("border-image-slice", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-source)
pub fn border_image_source(value: String) -> Style {
  property("border-image-source", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-width)
pub fn border_image_width(value: Size) -> Style {
  property("border-image-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-image-width)
pub fn border_image_width_(value: String) -> Style {
  property("border-image-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline)
pub fn border_inline(value: String) -> Style {
  property("border-inline", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-color)
pub fn border_inline_color(value: String) -> Style {
  property("border-inline-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-end)
pub fn border_inline_end(value: String) -> Style {
  property("border-inline-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color)
pub fn border_inline_end_color(value: String) -> Style {
  property("border-inline-end-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style)
pub fn border_inline_end_style(value: String) -> Style {
  property("border-inline-end-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)
pub fn border_inline_end_width(value: Size) -> Style {
  property("border-inline-end-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)
pub fn border_inline_end_width_(value: String) -> Style {
  property("border-inline-end-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-start)
pub fn border_inline_start(value: String) -> Style {
  property("border-inline-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color)
pub fn border_inline_start_color(value: String) -> Style {
  property("border-inline-start-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style)
pub fn border_inline_start_style(value: String) -> Style {
  property("border-inline-start-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)
pub fn border_inline_start_width(value: Size) -> Style {
  property("border-inline-start-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)
pub fn border_inline_start_width_(value: String) -> Style {
  property("border-inline-start-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-style)
pub fn border_inline_style(value: String) -> Style {
  property("border-inline-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)
pub fn border_inline_width(value: Size) -> Style {
  property("border-inline-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)
pub fn border_inline_width_(value: String) -> Style {
  property("border-inline-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-left)
pub fn border_left(value: String) -> Style {
  property("border-left", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-left-color)
pub fn border_left_color(value: String) -> Style {
  property("border-left-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-left-style)
pub fn border_left_style(value: String) -> Style {
  property("border-left-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-left-width)
pub fn border_left_width(value: Size) -> Style {
  property("border-left-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-left-width)
pub fn border_left_width_(value: String) -> Style {
  property("border-left-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-radius)
pub fn border_radius(border_radius: Size) -> Style {
  property("border-radius", size.to_string(border_radius))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-radius)
pub fn border_radius_(border_radius: String) -> Style {
  property("border-radius", border_radius)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-right)
pub fn border_right(value: String) -> Style {
  property("border-right", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-right-color)
pub fn border_right_color(value: String) -> Style {
  property("border-right-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-right-style)
pub fn border_right_style(value: String) -> Style {
  property("border-right-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-right-width)
pub fn border_right_width(value: Size) -> Style {
  property("border-right-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-right-width)
pub fn border_right_width_(value: String) -> Style {
  property("border-right-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-spacing)
pub fn border_spacing(value: Size) -> Style {
  property("border-spacing", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-spacing)
pub fn border_spacing_(value: String) -> Style {
  property("border-spacing", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius)
pub fn border_start_end_radius(value: String) -> Style {
  property("border-start-end-radius", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius)
pub fn border_start_start_radius(value: String) -> Style {
  property("border-start-start-radius", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-style)
pub fn border_style(value: String) -> Style {
  property("border-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top)
pub fn border_top(value: String) -> Style {
  property("border-top", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-color)
pub fn border_top_color(value: String) -> Style {
  property("border-top-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
pub fn border_top_left_radius(border_top_left_radius: Size) -> Style {
  size.to_string(border_top_left_radius)
  |> property("border-top-left-radius", _)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
pub fn border_top_left_radius_(border_top_left_radius: String) -> Style {
  property("border-top-left-radius", border_top_left_radius)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
pub fn border_top_right_radius(border_top_right_radius: Size) -> Style {
  size.to_string(border_top_right_radius)
  |> property("border-top-right-radius", _)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
pub fn border_top_right_radius_(border_top_right_radius: String) -> Style {
  property("border-top-right-radius", border_top_right_radius)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-style)
pub fn border_top_style(value: String) -> Style {
  property("border-top-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-width)
pub fn border_top_width(value: Size) -> Style {
  property("border-top-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-top-width)
pub fn border_top_width_(value: String) -> Style {
  property("border-top-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-width)
pub fn border_width(value: Size) -> Style {
  property("border-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/border-width)
pub fn border_width_(value: String) -> Style {
  property("border-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/bottom)
pub fn bottom(size: Size) -> Style {
  property("bottom", size.to_string(size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/bottom)
pub fn bottom_(size: String) -> Style {
  property("bottom", size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
pub fn box_shadow(box_shadow: String) -> Style {
  property("box-shadow", box_shadow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
pub fn box_sizing(box_sizing: String) -> Style {
  property("box-sizing", box_sizing)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/caption-side)
pub fn caption_side(value: String) -> Style {
  property("caption-side", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/caret-color)
pub fn caret_color(value: String) -> Style {
  property("caret-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/clear)
pub fn clear(value: String) -> Style {
  property("clear", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/clip-path)
pub fn clip_path(value: String) -> Style {
  property("clip-path", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/color)
pub fn color(color: String) -> Style {
  property("color", color)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/color-interpolation)
pub fn color_interpolation(value: String) -> Style {
  property("color-interpolation", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/color-scheme)
pub fn color_scheme(value: String) -> Style {
  property("color-scheme", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-count)
pub fn column_count(value: String) -> Style {
  property("column-count", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-fill)
pub fn column_fill(value: String) -> Style {
  property("column-fill", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-gap)
pub fn column_gap(column_gap: Size) -> Style {
  property("column-gap", size.to_string(column_gap))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-rule)
pub fn column_rule(value: String) -> Style {
  property("column-rule", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-rule-color)
pub fn column_rule_color(value: String) -> Style {
  property("column-rule-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-rule-style)
pub fn column_rule_style(value: String) -> Style {
  property("column-rule-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-rule-width)
pub fn column_rule_width(value: String) -> Style {
  property("column-rule-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-span)
pub fn column_span(value: String) -> Style {
  property("column-span", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/column-width)
pub fn column_width(value: String) -> Style {
  property("column-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/columns)
pub fn columns(value: String) -> Style {
  property("columns", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain)
pub fn contain(value: String) -> Style {
  property("contain", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size)
pub fn contain_intrinsic_block_size(value: Size) -> Style {
  property("contain-intrinsic-block-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size)
pub fn contain_intrinsic_block_size_(value: String) -> Style {
  property("contain-intrinsic-block-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)
pub fn contain_intrinsic_height(value: Size) -> Style {
  property("contain-intrinsic-height", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)
pub fn contain_intrinsic_height_(value: String) -> Style {
  property("contain-intrinsic-height", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size)
pub fn contain_intrinsic_inline_size(value: Size) -> Style {
  property("contain-intrinsic-inline-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size)
pub fn contain_intrinsic_inline_size_(value: String) -> Style {
  property("contain-intrinsic-inline-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)
pub fn contain_intrinsic_size(value: Size) -> Style {
  property("contain-intrinsic-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)
pub fn contain_intrinsic_size_(value: String) -> Style {
  property("contain-intrinsic-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)
pub fn contain_intrinsic_width(value: Size) -> Style {
  property("contain-intrinsic-width", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)
pub fn contain_intrinsic_width_(value: String) -> Style {
  property("contain-intrinsic-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/container)
pub fn container(value: String) -> Style {
  property("container", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/container-name)
pub fn container_name(value: String) -> Style {
  property("container-name", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/container-type)
pub fn container_type(value: String) -> Style {
  property("container-type", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/content)
pub fn content(value: String) -> Style {
  property("content", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/counter-increment)
pub fn counter_increment(value: String) -> Style {
  property("counter-increment", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/counter-reset)
pub fn counter_reset(value: String) -> Style {
  property("counter-reset", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/counter-set)
pub fn counter_set(value: String) -> Style {
  property("counter-set", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/cursor)
pub fn cursor(cursor: String) -> Style {
  property("cursor", cursor)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/cx)
pub fn cx(value: Size) -> Style {
  property("cx", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/cx)
pub fn cx_(value: String) -> Style {
  property("cx", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/cy)
pub fn cy(value: Size) -> Style {
  property("cy", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/cy)
pub fn cy_(value: String) -> Style {
  property("cy", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/direction)
pub fn direction(direction: String) -> Style {
  property("direction", direction)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/display)
pub fn display(display: String) -> Style {
  property("display", display)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/empty-cells)
pub fn empty_cells(empty_cells: String) -> Style {
  property("empty-cells", empty_cells)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/field-sizing)
pub fn field_sizing(field_sizing: String) -> Style {
  property("field-sizing", field_sizing)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/filter)
pub fn filter(filter: String) -> Style {
  property("filter", filter)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex)
pub fn flex(flex: String) -> Style {
  property("flex", flex)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
pub fn flex_basis(flex_basis: String) -> Style {
  property("flex-basis", flex_basis)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
pub fn flex_direction(flex_direction: String) -> Style {
  property("flex-direction", flex_direction)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
pub fn flex_flow(flex_flow: String) -> Style {
  property("flex-flow", flex_flow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
pub fn flex_grow(flex_grow: Int) -> Style {
  property("flex-grow", int.to_string(flex_grow))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
pub fn flex_grow_(flex_grow: String) -> Style {
  property("flex-grow", flex_grow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
pub fn flex_shrink(flex_shrink: Float) -> Style {
  property("flex-shrink", float.to_string(flex_shrink))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
pub fn flex_shrink_(flex_shrink: String) -> Style {
  property("flex-shrink", flex_shrink)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
pub fn flex_wrap(flex_wrap: String) -> Style {
  property("flex-wrap", flex_wrap)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/float)
pub fn float(float: String) -> Style {
  property("float", float)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font)
pub fn font(value: String) -> Style {
  property("font", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-family)
pub fn font_family(font_family: String) -> Style {
  property("font-family", font_family)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings)
pub fn font_feature_settings(value: String) -> Style {
  property("font-feature-settings", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-kerning)
pub fn font_kerning(value: String) -> Style {
  property("font-kerning", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-language-override)
pub fn font_language_override(value: String) -> Style {
  property("font-language-override", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing)
pub fn font_optical_sizing(value: String) -> Style {
  property("font-optical-sizing", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-palette)
pub fn font_palette(value: String) -> Style {
  property("font-palette", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-size)
pub fn font_size(font_size: Size) -> Style {
  property("font-size", size.to_string(font_size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-size)
pub fn font_size_(font_size: String) -> Style {
  property("font-size", font_size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust)
pub fn font_size_adjust(value: String) -> Style {
  property("font-size-adjust", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-stretch)
pub fn font_stretch(value: String) -> Style {
  property("font-stretch", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-style)
pub fn font_style(font_style: String) -> Style {
  property("font-style", font_style)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-synthesis)
pub fn font_synthesis(value: String) -> Style {
  property("font-synthesis", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position)
pub fn font_synthesis_position(value: String) -> Style {
  property("font-synthesis-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps)
pub fn font_synthesis_small_caps(value: String) -> Style {
  property("font-synthesis-small-caps", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style)
pub fn font_synthesis_style(value: String) -> Style {
  property("font-synthesis-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight)
pub fn font_synthesis_weight(value: String) -> Style {
  property("font-synthesis-weight", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant)
pub fn font_variant(value: String) -> Style {
  property("font-variant", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates)
pub fn font_variant_alternates(value: String) -> Style {
  property("font-variant-alternates", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps)
pub fn font_variant_caps(value: String) -> Style {
  property("font-variant-caps", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian)
pub fn font_variant_east_asian(value: String) -> Style {
  property("font-variant-east-asian", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji)
pub fn font_variant_emoji(value: String) -> Style {
  property("font-variant-emoji", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures)
pub fn font_variant_ligatures(value: String) -> Style {
  property("font-variant-ligatures", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric)
pub fn font_variant_numeric(value: String) -> Style {
  property("font-variant-numeric", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variant-position)
pub fn font_variant_position(value: String) -> Style {
  property("font-variant-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings)
pub fn font_variation_settings(value: String) -> Style {
  property("font-variation-settings", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/font-weight)
pub fn font_weight(font_weight: String) -> Style {
  property("font-weight", font_weight)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust)
pub fn forced_color_adjust(value: String) -> Style {
  property("forced-color-adjust", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/gap)
pub fn gap(gap: Size) -> Style {
  property("gap", size.to_string(gap))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/gap)
pub fn gap_(gap: String) -> Style {
  property("gap", gap)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-area)
pub fn grid_area(grid_area: String) -> Style {
  property("grid-area", grid_area)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns)
pub fn grid_auto_columns(grid_auto_columns: String) -> Style {
  property("grid-auto-columns", grid_auto_columns)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow)
pub fn grid_auto_flow(grid_auto_flow: String) -> Style {
  property("grid-auto-flow", grid_auto_flow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows)
pub fn grid_auto_rows(grid_auto_rows: String) -> Style {
  property("grid-auto-rows", grid_auto_rows)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-column)
pub fn grid_column(grid_column: String) -> Style {
  property("grid-column", grid_column)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-column-end)
pub fn grid_column_end(grid_column: String) -> Style {
  property("grid-column-end", grid_column)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-column-start)
pub fn grid_column_start(grid_column: String) -> Style {
  property("grid-column-start", grid_column)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-row)
pub fn grid_row(grid_row: String) -> Style {
  property("grid-row", grid_row)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-row-end)
pub fn grid_row_end(grid_row: String) -> Style {
  property("grid-row-end", grid_row)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-row-start)
pub fn grid_row_start(grid_row: String) -> Style {
  property("grid-row-start", grid_row)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-template)
pub fn grid_template(grid_template: String) -> Style {
  property("grid-template", grid_template)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas)
pub fn grid_template_areas(grid_template_areas: List(String)) -> Style {
  grid_template_areas
  |> list.map(fn(content) { "\"" <> content <> "\"" })
  |> string.join("\n")
  |> property("grid-template-areas", _)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns)
pub fn grid_template_columns(grid_template_columns: String) -> Style {
  property("grid-template-columns", grid_template_columns)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows)
pub fn grid_template_rows(grid_template_rows: String) -> Style {
  property("grid-template-rows", grid_template_rows)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation)
pub fn hanging_punctuation(value: String) -> Style {
  property("hanging-punctuation", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/height)
pub fn height(height: Size) -> Style {
  property("height", size.to_string(height))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/height)
pub fn height_(height: String) -> Style {
  property("height", height)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character)
pub fn hyphenate_character(value: String) -> Style {
  property("hyphenate-character", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/hyphenate-limit-chars)
pub fn hyphenate_limit_chars(value: String) -> Style {
  property("hyphenate-limit-chars", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/hyphens)
pub fn hyphens(value: String) -> Style {
  property("hyphens", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/image-orientation)
pub fn image_orientation(value: String) -> Style {
  property("image-orientation", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/image-rendering)
pub fn image_rendering(value: String) -> Style {
  property("image-rendering", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inline-size)
pub fn inline_size(value: String) -> Style {
  property("inline-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset)
pub fn inset(value: String) -> Style {
  property("inset", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-area)
pub fn inset_area(value: String) -> Style {
  property("inset-area", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-block)
pub fn inset_block(value: String) -> Style {
  property("inset-block", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-block-end)
pub fn inset_block_end(value: String) -> Style {
  property("inset-block-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-block-start)
pub fn inset_block_start(value: String) -> Style {
  property("inset-block-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-inline)
pub fn inset_inline(value: String) -> Style {
  property("inset-inline", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end)
pub fn inset_inline_end(value: String) -> Style {
  property("inset-inline-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start)
pub fn inset_inline_start(value: String) -> Style {
  property("inset-inline-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/isolation)
pub fn isolation(value: String) -> Style {
  property("isolation", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/justify-content)
pub fn justify_content(justify: String) -> Style {
  property("justify-content", justify)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/justify-items)
pub fn justify_items(justify: String) -> Style {
  property("justify-items", justify)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/justify-self)
pub fn justify_self(justify: String) -> Style {
  property("justify-self", justify)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/justify-tracks)
pub fn justify_tracks(justify: String) -> Style {
  property("justify-tracks", justify)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/left)
pub fn left(size: Size) -> Style {
  property("left", size.to_string(size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/left)
pub fn left_(size: String) -> Style {
  property("left", size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/letter-spacing)
pub fn letter_spacing(letter_spacing: String) -> Style {
  property("letter-spacing", letter_spacing)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/line-break)
pub fn line_break(line_break: String) -> Style {
  property("line-break", line_break)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/line-height)
pub fn line_height(line_height: String) -> Style {
  property("line-height", line_height)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/list-style)
pub fn list_style(list_style: String) -> Style {
  property("list-style", list_style)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/list-style-image)
pub fn list_style_image(list_style_image: String) -> Style {
  property("list-style-image", list_style_image)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/list-style-position)
pub fn list_style_position(list_style_position: String) -> Style {
  property("list-style-position", list_style_position)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/list-style-type)
pub fn list_style_type(list_style_type: String) -> Style {
  property("list-style-type", list_style_type)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin)
pub fn margin(margin: Size) -> Style {
  property("margin", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin)
pub fn margin_(margin: String) -> Style {
  property("margin", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block)
pub fn margin_block(margin: Size) -> Style {
  property("margin-block", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block)
pub fn margin_block_(margin: String) -> Style {
  property("margin-block", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)
pub fn margin_block_end(margin: Size) -> Style {
  property("margin-block-end", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)
pub fn margin_block_end_(margin: String) -> Style {
  property("margin-block-end", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)
pub fn margin_block_start(margin: Size) -> Style {
  property("margin-block-start", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)
pub fn margin_block_start_(margin: String) -> Style {
  property("margin-block-start", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-bottom)
pub fn margin_bottom(margin: Size) -> Style {
  property("margin-bottom", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-bottom)
pub fn margin_bottom_(margin: String) -> Style {
  property("margin-bottom", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline)
pub fn margin_inline(margin: Size) -> Style {
  property("margin-inline", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline)
pub fn margin_inline_(margin: String) -> Style {
  property("margin-inline", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)
pub fn margin_inline_end(margin: Size) -> Style {
  property("margin-inline-end", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)
pub fn margin_inline_end_(margin: String) -> Style {
  property("margin-inline-end", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)
pub fn margin_inline_start(margin: Size) -> Style {
  property("margin-inline-start", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)
pub fn margin_inline_start_(margin: String) -> Style {
  property("margin-inline-start", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-left)
pub fn margin_left(margin: Size) -> Style {
  property("margin-left", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-left)
pub fn margin_left_(margin: String) -> Style {
  property("margin-left", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-right)
pub fn margin_right(margin: Size) -> Style {
  property("margin-right", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-right)
pub fn margin_right_(margin: String) -> Style {
  property("margin-right", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-top)
pub fn margin_top(margin: Size) -> Style {
  property("margin-top", size.to_string(margin))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/margin-top)
pub fn margin_top_(margin: String) -> Style {
  property("margin-top", margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask)
pub fn mask(value: String) -> Style {
  property("mask", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border)
pub fn mask_border(value: String) -> Style {
  property("mask-border", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-mode)
pub fn mask_border_mode(value: String) -> Style {
  property("mask-border-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)
pub fn mask_border_outset(value: String) -> Style {
  property("mask-border-outset", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)
pub fn mask_border_repeat(value: String) -> Style {
  property("mask-border-repeat", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)
pub fn mask_border_slice(value: String) -> Style {
  property("mask-border-slice", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)
pub fn mask_border_source(value: String) -> Style {
  property("mask-border-source", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)
pub fn mask_border_width(value: String) -> Style {
  property("mask-border-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
pub fn mask_clip(value: String) -> Style {
  property("mask-clip", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
pub fn mask_composite(value: String) -> Style {
  property("mask-composite", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-image)
pub fn mask_image(value: String) -> Style {
  property("mask-image", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-mode)
pub fn mask_mode(value: String) -> Style {
  property("mask-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
pub fn mask_origin(value: String) -> Style {
  property("mask-origin", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-position)
pub fn mask_position(value: String) -> Style {
  property("mask-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
pub fn mask_repeat(value: String) -> Style {
  property("mask-repeat", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-size)
pub fn mask_size(value: String) -> Style {
  property("mask-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mask-type)
pub fn mask_type(value: String) -> Style {
  property("mask-type", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/math-depth)
pub fn math_depth(value: String) -> Style {
  property("math-depth", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/math-style)
pub fn math_style(value: String) -> Style {
  property("math-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-block-size)
pub fn max_block_size(value: Size) -> Style {
  property("max-block-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-block-size)
pub fn max_block_size_(value: String) -> Style {
  property("max-block-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-height)
pub fn max_height(height: Size) -> Style {
  property("max-height", size.to_string(height))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-height)
pub fn max_height_(height: String) -> Style {
  property("max-height", height)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)
pub fn max_inline_size(value: Size) -> Style {
  property("max-inline-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)
pub fn max_inline_size_(value: String) -> Style {
  property("max-inline-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-width)
pub fn max_width(width: Size) -> Style {
  property("max-width", size.to_string(width))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/max-width)
pub fn max_width_(width: String) -> Style {
  property("max-width", width)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-block-size)
pub fn min_block_size(value: Size) -> Style {
  property("min-block-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-block-size)
pub fn min_block_size_(value: String) -> Style {
  property("min-block-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-height)
pub fn min_height(height: Size) -> Style {
  property("min-height", size.to_string(height))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-height)
pub fn min_height_(height: String) -> Style {
  property("min-height", height)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)
pub fn min_inline_size(value: Size) -> Style {
  property("min-inline-size", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)
pub fn min_inline_size_(value: String) -> Style {
  property("min-inline-size", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-width)
pub fn min_width(width: Size) -> Style {
  property("min-width", size.to_string(width))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/min-width)
pub fn min_width_(width: String) -> Style {
  property("min-width", width)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode)
pub fn mix_blend_mode(value: String) -> Style {
  property("mix-blend-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/object-fit)
pub fn object_fit(object_fit: String) -> Style {
  property("object-fit", object_fit)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/object-position)
pub fn object_position(object_position: String) -> Style {
  property("object-position", object_position)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset)
pub fn offset(offset: String) -> Style {
  property("offset", offset)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset-anchor)
pub fn offset_anchor(offset_anchor: String) -> Style {
  property("offset-anchor", offset_anchor)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset-distance)
pub fn offset_distance(offset_distance: String) -> Style {
  property("offset-distance", offset_distance)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset-path)
pub fn offset_path(offset_path: String) -> Style {
  property("offset-path", offset_path)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset-position)
pub fn offset_position(offset_position: String) -> Style {
  property("offset-position", offset_position)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/offset-rotate)
pub fn offset_rotate(offset_rotate: String) -> Style {
  property("offset-rotate", offset_rotate)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/opacity)
pub fn opacity(opacity: Float) -> Style {
  property("opacity", float.to_string(opacity))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/order)
pub fn order(value: Int) -> Style {
  property("order", int.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/order)
pub fn order_(value: String) -> Style {
  property("order", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/orphans)
pub fn orphans(value: Int) -> Style {
  property("orphans", int.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/orphans)
pub fn orphans_(value: String) -> Style {
  property("orphans", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/outline)
pub fn outline(outline: String) -> Style {
  property("outline", outline)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/outline-color)
pub fn outline_color(outline_color: String) -> Style {
  property("outline-color", outline_color)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/outline-offset)
pub fn outline_offset(outline_offset: String) -> Style {
  property("outline-offset", outline_offset)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/outline-style)
pub fn outline_style(outline_style: String) -> Style {
  property("outline-style", outline_style)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/outline-width)
pub fn outline_width(outline_width: String) -> Style {
  property("outline-width", outline_width)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow)
pub fn overflow(overflow: String) -> Style {
  property("overflow", overflow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor)
pub fn overflow_anchor(overflow_anchor: String) -> Style {
  property("overflow-anchor", overflow_anchor)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-block)
pub fn overflow_block(overflow_block: String) -> Style {
  property("overflow-block", overflow_block)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin)
pub fn overflow_clip_margin(overflow_clip_margin: String) -> Style {
  property("overflow-clip-margin", overflow_clip_margin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-inline)
pub fn overflow_inline(overflow_inline: String) -> Style {
  property("overflow-inline", overflow_inline)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)
pub fn overflow_wrap(overflow_wrap: String) -> Style {
  property("overflow-wrap", overflow_wrap)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-x)
pub fn overflow_x(overflow_x: String) -> Style {
  property("overflow-x", overflow_x)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overflow-y)
pub fn overflow_y(overflow_y: String) -> Style {
  property("overflow-y", overflow_y)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior)
pub fn overscroll_behavior(value: String) -> Style {
  property("overscroll-behavior", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block)
pub fn overscroll_behavior_block(value: String) -> Style {
  property("overscroll-behavior-block", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline)
pub fn overscroll_behavior_inline(value: String) -> Style {
  property("overscroll-behavior-inline", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x)
pub fn overscroll_behavior_x(value: String) -> Style {
  property("overscroll-behavior-x", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y)
pub fn overscroll_behavior_y(value: String) -> Style {
  property("overscroll-behavior-y", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding)
pub fn padding(padding: Size) -> Style {
  property("padding", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding)
pub fn padding_(padding: String) -> Style {
  property("padding", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block)
pub fn padding_block(padding: Size) -> Style {
  property("padding-block", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block)
pub fn padding_block_(padding: String) -> Style {
  property("padding-block", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)
pub fn padding_block_end(padding: Size) -> Style {
  property("padding-block-end", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)
pub fn padding_block_end_(padding: String) -> Style {
  property("padding-block-end", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)
pub fn padding_block_start(padding: Size) -> Style {
  property("padding-block-start", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)
pub fn padding_block_start_(padding: String) -> Style {
  property("padding-block-start", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-bottom)
pub fn padding_bottom(padding: Size) -> Style {
  property("padding-bottom", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline)
pub fn padding_inline(padding: Size) -> Style {
  property("padding-inline", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline)
pub fn padding_inline_(padding: String) -> Style {
  property("padding-inline", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)
pub fn padding_inline_end(padding: Size) -> Style {
  property("padding-inline-end", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)
pub fn padding_inline_end_(padding: String) -> Style {
  property("padding-inline-end", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)
pub fn padding_inline_start(padding: Size) -> Style {
  property("padding-inline-start", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)
pub fn padding_inline_start_(padding: String) -> Style {
  property("padding-inline-start", padding)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-left)
pub fn padding_left(padding: Size) -> Style {
  property("padding-left", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-right)
pub fn padding_right(padding: Size) -> Style {
  property("padding-right", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/padding-top)
pub fn padding_top(padding: Size) -> Style {
  property("padding-top", size.to_string(padding))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/page)
pub fn page(value: String) -> Style {
  property("page", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/page-break-after)
pub fn page_break_after(value: String) -> Style {
  property("page-break-after", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/page-break-before)
pub fn page_break_before(value: String) -> Style {
  property("page-break-before", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)
pub fn page_break_inside(value: String) -> Style {
  property("page-break-inside", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/paint-order)
pub fn paint_order(value: String) -> Style {
  property("paint-order", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/perspective)
pub fn perspective(value: String) -> Style {
  property("perspective", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
pub fn perspective_origin(value: String) -> Style {
  property("perspective-origin", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/place-content)
pub fn place_content(place: String) -> Style {
  property("place-content", place)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/place-items)
pub fn place_items(place: String) -> Style {
  property("place-items", place)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/place-self)
pub fn place_self(place: String) -> Style {
  property("place-self", place)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/pointer-events)
pub fn pointer_events(pointer_events: String) -> Style {
  property("pointer-events", pointer_events)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/position)
pub fn position(position: String) -> Style {
  property("position", position)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust)
pub fn print_color_adjust(print: String) -> Style {
  property("print-color-adjust", print)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/quotes)
pub fn quotes(quotes: String) -> Style {
  property("quotes", quotes)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/r)
pub fn r(r: String) -> Style {
  property("r", r)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/resize)
pub fn resize(value: String) -> Style {
  property("resize", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/right)
pub fn right(size: Size) -> Style {
  property("right", size.to_string(size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/right)
pub fn right_(size: String) -> Style {
  property("right", size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/rotate)
pub fn rotate(value: String) -> Style {
  property("rotate", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/row-gap)
pub fn row_gap(row_gap: Size) -> Style {
  property("row-gap", size.to_string(row_gap))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/ruby-position)
pub fn ruby_position(value: String) -> Style {
  property("ruby-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/rx)
pub fn rx(value: Size) -> Style {
  property("rx", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/rx)
pub fn rx_(value: String) -> Style {
  property("rx", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/ry)
pub fn ry(value: Size) -> Style {
  property("ry", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/ry)
pub fn ry_(value: String) -> Style {
  property("ry", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scale)
pub fn scale(value: String) -> Style {
  property("scale", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior)
pub fn scroll_behavior(value: String) -> Style {
  property("scroll-behavior", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin)
pub fn scroll_margin(value: Size) -> Style {
  property("scroll-margin", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin)
pub fn scroll_margin_(value: String) -> Style {
  property("scroll-margin", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)
pub fn scroll_margin_block(value: Size) -> Style {
  property("scroll-margin-block", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)
pub fn scroll_margin_block_(value: String) -> Style {
  property("scroll-margin-block", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)
pub fn scroll_margin_block_end(value: Size) -> Style {
  property("scroll-margin-block-end", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)
pub fn scroll_margin_block_end_(value: String) -> Style {
  property("scroll-margin-block-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)
pub fn scroll_margin_block_start(value: Size) -> Style {
  property("scroll-margin-block-start", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)
pub fn scroll_margin_block_start_(value: String) -> Style {
  property("scroll-margin-block-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)
pub fn scroll_margin_bottom(value: Size) -> Style {
  property("scroll-margin-bottom", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)
pub fn scroll_margin_bottom_(value: String) -> Style {
  property("scroll-margin-bottom", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)
pub fn scroll_margin_inline(value: Size) -> Style {
  property("scroll-margin-inline", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)
pub fn scroll_margin_inline_(value: String) -> Style {
  property("scroll-margin-inline", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)
pub fn scroll_margin_inline_end(value: Size) -> Style {
  property("scroll-margin-inline-end", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)
pub fn scroll_margin_inline_end_(value: String) -> Style {
  property("scroll-margin-inline-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)
pub fn scroll_margin_inline_start(value: Size) -> Style {
  property("scroll-margin-inline-start", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)
pub fn scroll_margin_inline_start_(value: String) -> Style {
  property("scroll-margin-inline-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)
pub fn scroll_margin_left(value: Size) -> Style {
  property("scroll-margin-left", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)
pub fn scroll_margin_left_(value: String) -> Style {
  property("scroll-margin-left", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)
pub fn scroll_margin_right(value: Size) -> Style {
  property("scroll-margin-right", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)
pub fn scroll_margin_right_(value: String) -> Style {
  property("scroll-margin-right", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)
pub fn scroll_margin_top(value: Size) -> Style {
  property("scroll-margin-top", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)
pub fn scroll_margin_top_(value: String) -> Style {
  property("scroll-margin-top", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)
pub fn scroll_padding(value: Size) -> Style {
  property("scroll-padding", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)
pub fn scroll_padding_(value: String) -> Style {
  property("scroll-padding", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)
pub fn scroll_padding_block(value: Size) -> Style {
  property("scroll-padding-block", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)
pub fn scroll_padding_block_(value: String) -> Style {
  property("scroll-padding-block", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)
pub fn scroll_padding_block_end(value: Size) -> Style {
  property("scroll-padding-block-end", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)
pub fn scroll_padding_block_end_(value: String) -> Style {
  property("scroll-padding-block-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)
pub fn scroll_padding_block_start(value: Size) -> Style {
  property("scroll-padding-block-start", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)
pub fn scroll_padding_block_start_(value: String) -> Style {
  property("scroll-padding-block-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)
pub fn scroll_padding_bottom(value: Size) -> Style {
  property("scroll-padding-bottom", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)
pub fn scroll_padding_bottom_(value: String) -> Style {
  property("scroll-padding-bottom", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)
pub fn scroll_padding_inline(value: Size) -> Style {
  property("scroll-padding-inline", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)
pub fn scroll_padding_inline_(value: String) -> Style {
  property("scroll-padding-inline", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)
pub fn scroll_padding_inline_end(value: Size) -> Style {
  property("scroll-padding-inline-end", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)
pub fn scroll_padding_inline_end_(value: String) -> Style {
  property("scroll-padding-inline-end", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)
pub fn scroll_padding_inline_start(value: Size) -> Style {
  property("scroll-padding-inline-start", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)
pub fn scroll_padding_inline_start_(value: String) -> Style {
  property("scroll-padding-inline-start", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)
pub fn scroll_padding_left(value: Size) -> Style {
  property("scroll-padding-left", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)
pub fn scroll_padding_left_(value: String) -> Style {
  property("scroll-padding-left", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)
pub fn scroll_padding_right(value: Size) -> Style {
  property("scroll-padding-right", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)
pub fn scroll_padding_right_(value: String) -> Style {
  property("scroll-padding-right", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)
pub fn scroll_padding_top(value: Size) -> Style {
  property("scroll-padding-top", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)
pub fn scroll_padding_top_(value: String) -> Style {
  property("scroll-padding-top", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align)
pub fn scroll_snap_align(value: String) -> Style {
  property("scroll-snap-align", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop)
pub fn scroll_snap_stop(value: String) -> Style {
  property("scroll-snap-stop", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type)
pub fn scroll_snap_type(value: String) -> Style {
  property("scroll-snap-type", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color)
pub fn scrollbar_color(value: String) -> Style {
  property("scrollbar-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter)
pub fn scrollbar_gutter(value: String) -> Style {
  property("scrollbar-gutter", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width)
pub fn scrollbar_width(value: String) -> Style {
  property("scrollbar-width", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)
pub fn shape_image_threshold(value: Float) -> Style {
  property("shape-image-threshold", float.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)
pub fn shape_image_threshold_(value: String) -> Style {
  property("shape-image-threshold", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/shape-margin)
pub fn shape_margin(value: Size) -> Style {
  property("shape-margin", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/shape-margin)
pub fn shape_margin_(value: String) -> Style {
  property("shape-margin", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/shape-outside)
pub fn shape_outside(value: String) -> Style {
  property("shape-outside", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/tab-size)
pub fn tab_size(size: Size) -> Style {
  property("tab-size", size.to_string(size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/tab-size)
pub fn tab_size_(size: String) -> Style {
  property("tab-size", size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/table-layout)
pub fn table_layout(layout: String) -> Style {
  property("table-layout", layout)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-align)
pub fn text_align(text_align: String) -> Style {
  property("text-align", text_align)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-align-last)
pub fn text_align_last(value: String) -> Style {
  property("text-align-last", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright)
pub fn text_combine_upright(value: String) -> Style {
  property("text-combine-upright", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration)
pub fn text_decoration(text_decoration: String) -> Style {
  property("text-decoration", text_decoration)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color)
pub fn text_decoration_color(value: String) -> Style {
  property("text-decoration-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line)
pub fn text_decoration_line(value: String) -> Style {
  property("text-decoration-line", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink)
pub fn text_decoration_skip_ink(value: String) -> Style {
  property("text-decoration-skip-ink", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style)
pub fn text_decoration_style(value: String) -> Style {
  property("text-decoration-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness)
pub fn text_decoration_thickness(value: String) -> Style {
  property("text-decoration-thickness", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-emphasis)
pub fn text_emphasis(value: String) -> Style {
  property("text-emphasis", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color)
pub fn text_emphasis_color(value: String) -> Style {
  property("text-emphasis-color", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position)
pub fn text_emphasis_position(value: String) -> Style {
  property("text-emphasis-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style)
pub fn text_emphasis_style(value: String) -> Style {
  property("text-emphasis-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-indent)
pub fn text_indent(value: String) -> Style {
  property("text-indent", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-justify)
pub fn text_justify(text_justify: String) -> Style {
  property("text-justify", text_justify)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-orientation)
pub fn text_orientation(value: String) -> Style {
  property("text-orientation", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-overflow)
pub fn text_overflow(text_overflow: String) -> Style {
  property("text-overflow", text_overflow)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-rendering)
pub fn text_rendering(value: String) -> Style {
  property("text-rendering", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-shadow)
pub fn text_shadow(value: String) -> Style {
  property("text-shadow", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-transform)
pub fn text_transform(text_transform: String) -> Style {
  property("text-transform", text_transform)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)
pub fn text_underline_offset(value: Size) -> Style {
  property("text-underline-offset", size.to_string(value))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)
pub fn text_underline_offset_(value: String) -> Style {
  property("text-underline-offset", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-underline-position)
pub fn text_underline_position(value: String) -> Style {
  property("text-underline-position", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-wrap)
pub fn text_wrap(value: String) -> Style {
  property("text-wrap", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-wrap-mode)
pub fn text_wrap_mode(value: String) -> Style {
  property("text-wrap-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/text-wrap-style)
pub fn text_wrap_style(value: String) -> Style {
  property("text-wrap-style", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/top)
pub fn top(size: Size) -> Style {
  property("top", size.to_string(size))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/top)
pub fn top_(size: String) -> Style {
  property("top", size)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/touch-action)
pub fn touch_action(value: String) -> Style {
  property("touch-action", value)
}

/// `transform` uses `css.transform` to offer an enhanced API for CSS transforms. \
/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transform)
pub fn transform(transform: List(Transform)) -> Style {
  let transform = transform.to_string(transform)
  property("transform", transform)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transform)
pub fn transform_(transform: String) -> Style {
  property("transform", transform)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transform-box)
pub fn transform_box(transform_box: String) -> Style {
  property("transform-box", transform_box)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
pub fn transform_origin(transform_origin: String) -> Style {
  property("transform-origin", transform_origin)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transform-style)
pub fn transform_style(transform_style: String) -> Style {
  property("transform-style", transform_style)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition)
pub fn transition(transition: String) -> Style {
  property("transition", transition)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition-behavior)
pub fn transition_behavior(value: String) -> Style {
  property("transition-behavior", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
pub fn transition_delay(value: String) -> Style {
  property("transition-delay", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
pub fn transition_duration(value: String) -> Style {
  property("transition-duration", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition-property)
pub fn transition_property(value: String) -> Style {
  property("transition-property", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
pub fn transition_timing_function(value: String) -> Style {
  property("transition-timing-function", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/translate)
pub fn translate(translate: String) -> Style {
  property("translate", translate)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi)
pub fn unicode_bidi(value: String) -> Style {
  property("unicode-bidi", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/user-select)
pub fn user_select(user_select: String) -> Style {
  property("user-select", user_select)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/vertical-align)
pub fn vertical_align(value: String) -> Style {
  property("vertical-align", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/visibility)
pub fn visibility(visibility: String) -> Style {
  property("visibility", visibility)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/white-space)
pub fn white_space(white_space: String) -> Style {
  property("white-space", white_space)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/white-space-collapse)
pub fn white_space_collapse(white_space_collapse: String) -> Style {
  property("white-space-collapse", white_space_collapse)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/widows)
pub fn widows(value: String) -> Style {
  property("widows", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/width)
pub fn width(width: Size) -> Style {
  property("width", size.to_string(width))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/width)
pub fn width_(width: String) -> Style {
  property("width", width)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/will-change)
pub fn will_change(value: String) -> Style {
  property("will-change", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/word-break)
pub fn word_break(word_break: String) -> Style {
  property("word-break", word_break)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/word-spacing)
pub fn word_spacing(word_spacing: String) -> Style {
  property("word-spacing", word_spacing)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/word-wrap)
pub fn word_wrap(word_wrap: String) -> Style {
  property("word-wrap", word_wrap)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/writing-mode)
pub fn writing_mode(value: String) -> Style {
  property("writing-mode", value)
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/z-index)
pub fn z_index(z_index: Int) -> Style {
  property("z-index", int.to_string(z_index))
}

/// [Documentation](https://developer.mozilla.org/docs/Web/CSS/zoom)
pub fn zoom(value: String) -> Style {
  property("zoom", value)
}

/// Use it to avoid generating a property. Can be used to generate dynamic
/// classes, or when an empty property is needed.
///
/// ```gleam
/// pub fn my_class(is_blue: Bool) {
///   css.class([
///     case is_blue {
///       True -> css.background("blue")
///       False -> css.none()
///     }
///   ])
/// }
/// ```
pub fn none() -> Style {
  style.NoStyle
}

/// Write the arbitrary property you need. Sometimes, an unsupported property
/// is needed, maybe because it's prefixed, maybe because it's too recent,
/// maybe because it's still experimental.
///
/// ```gleam
/// pub fn my_class() {
///   css.class([
///     css.background("blue"),
///     css.property("-webkit-line-clamp", "3"),
///   ])
/// }
/// ```
pub fn property(field: String, content: String) -> Style {
  style.Property(field, content, False)
}

// Media queries
// Should be used with the media module.

/// Allows to write inline media queries in classes. Contrarily to inline CSS
/// where media queries can't be used, Sketch generates CSS all the way to
/// ensure media queries are usable.
///
/// > __Media queries__ allow you to apply CSS styles depending on a device's media
/// > type (such as print vs. screen) or other features or characteristics such
/// > as screen resolution or orientation,
/// > [aspect ratio](https://developer.mozilla.org/en-US/docs/Glossary/Aspect_ratio),
/// > browser [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport)
/// > width or height, user preferences such as preferring reduced motion,
/// > data usage, or transparency.
/// >
/// > [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/CSS_media_queries/Using_media_queries)
///
/// ```gleam
/// pub fn my_class() {
///   css.class([
///     css.background("blue"),
///     css.media(media.max_width(px(700)), [
///       css.background("red"),
///     ]),
///   ])
/// }
/// ```
pub fn media(query: Query, styles: List(Style)) -> Style {
  let media_selector = media.to_string(query)
  style.Media(media_selector, styles)
}

// Pseudo-selectors
// Contains pseudo-classes and pseudo-elements.

/// The `::placeholder` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements) represents the
/// [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder) text in an
/// [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) or
/// [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::placeholder)
pub fn placeholder(styles: List(Style)) -> Style {
  selector("::placeholder", styles)
}

/// The `::selection` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// applies styles to the part of a document that has been highlighted by the
/// user (such as clicking and dragging the mouse across text).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::selection)
pub fn selection(styles: List(Style)) -> Style {
  selector("::selection", styles)
}

/// In CSS, `::before` creates a [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// that is the first child of the selected element. It is often used to add
/// cosmetic [content](https://developer.mozilla.org/en-US/docs/Web/CSS/content)
/// to an element with the content property. It is inline by default.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::before)
pub fn before(styles: List(Style)) -> Style {
  selector("::before", styles)
}

/// In CSS, `::before` creates a [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// that is the last child of the selected element. It is often used to add
/// cosmetic [content](https://developer.mozilla.org/en-US/docs/Web/CSS/content)
/// to an element with the content property. It is inline by default.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::after)
pub fn after(styles: List(Style)) -> Style {
  selector("::after", styles)
}

/// The `::backdrop` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// is a box the size of the [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport),
/// which is rendered immediately beneath any element being presented in the
/// [top layer](https://developer.mozilla.org/en-US/docs/Glossary/Top_layer).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::backdrop)
pub fn backdrop(styles: List(Style)) -> Style {
  selector("::backdrop", styles)
}

/// The `::cue` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// matches [WebVTT](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API)
/// cues within a selected element. This can be used to
/// [style captions and other cues](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API#styling_webvtt_in_html_or_a_stylesheet)
/// in media with VTT tracks.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::cue)
pub fn cue(styles: List(Style)) -> Style {
  selector("::cue", styles)
}

/// The `::first-line` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// applies styles to the first line of a
/// [block container](https://developer.mozilla.org/en-US/docs/Web/CSS/Visual_formatting_model#block_containers).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::first-line)
pub fn first_line(styles: List(Style)) -> Style {
  selector("::first-line", styles)
}

/// The `::grammar-error` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// represents a text segment which the [user agent](https://developer.mozilla.org/en-US/docs/Glossary/User_agent)
/// has flagged as grammatically incorrect.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::grammar-error)
pub fn grammar_error(styles: List(Style)) -> Style {
  selector("::grammar-error", styles)
}

/// The `::spelling-error` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// represents a text segment which the [user agent](https://developer.mozilla.org/en-US/docs/Glossary/User_agent)
/// has flagged as incorrectly spelled.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::spelling-error)
pub fn spelling_error(styles: List(Style)) -> Style {
  selector("::spelling-error", styles)
}

/// The `::marker` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// selects the marker box of a list item, which typically contains a bullet or
/// number. It works on any element or pseudo-element set to
/// [`display: list-item`](https://developer.mozilla.org/en-US/docs/Web/CSS/display),
/// such as the [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) and
/// [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary) elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::marker)
pub fn marker(styles: List(Style)) -> Style {
  selector("::marker", styles)
}

/// The `::first-letter` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
/// applies styles to the first letter of the first line of a
/// [block container](https://developer.mozilla.org/en-US/docs/Web/CSS/Visual_formatting_model#block_containers),
/// but only when not preceded by other content (such as images or inline tables).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::first-letter)
pub fn first_letter(styles: List(Style)) -> Style {
  selector("::first-letter", styles)
}

/// The `::file-selector-button` CSS
/// [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements) represents the
/// button of an
/// [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) of
/// [`type="file"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/::file-selector-button)
pub fn file_selector_button(styles: List(Style)) -> Style {
  selector("::file-selector-button", styles)
}

/// The `:hover` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches when the user interacts with an element with a pointing device,
/// but does not necessarily activate it. It is generally triggered when the
/// user hovers over an element with the cursor (mouse pointer).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:hover)
pub fn hover(styles: List(Style)) -> Style {
  selector(":hover", styles)
}

/// The `:any-link` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents an element that acts as the source anchor of a hyperlink,
/// independent of whether it has been visited. In other words, it matches every
/// [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) or
/// [`<area>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)
/// element that has an `href` attribute. Thus, it matches all
/// elements that match [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link)
/// or [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:any-link)
pub fn any_link(styles: List(Style)) -> Style {
  selector(":any-link", styles)
}

/// The `:active` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element (such as a button) that is being activated by the user.
/// When using a mouse, "activation" typically starts when the user presses down
/// the primary mouse button.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:active)
pub fn active(styles: List(Style)) -> Style {
  selector(":active", styles)
}

/// The `:focus` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element (such as a form input) that has received focus. It is
/// generally triggered when the user clicks or taps on an element or selects it
/// with the keyboard's `Tab` key.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:focus)
pub fn focus(styles: List(Style)) -> Style {
  selector(":focus", styles)
}

/// The `:autofill` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches when an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// element has its value autofilled by the browser. The class stops matching
/// if the user edits the field.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:autofill)
pub fn autofill(styles: List(Style)) -> Style {
  selector(":autofill", styles)
}

/// The `:buffering` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents an element that is playable, such as [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)
/// or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// when the playable element is buffering a media resource.
///
/// An element is considered as buffering when that element cannot continue
/// playing because it is trying to load media data but does not yet have enough
/// data to begin or continue playback. For more information, see the
/// [Media buffering, seeking, and time ranges](https://developer.mozilla.org/en-US/docs/Web/Media/Audio_and_video_delivery/buffering_seeking_time_ranges#seekable)
/// guide.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:buffering)
pub fn buffering(styles: List(Style)) -> Style {
  selector(":buffering", styles)
}

/// The `:default` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selects form elements that are the default in a group of related elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:default)
pub fn default(styles: List(Style)) -> Style {
  selector(":default", styles)
}

/// The `:defined` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any element that has been defined. This includes any standard
/// element built into the browser and custom elements that have been
/// successfully defined (i.e. with the
/// [`CustomElementRegistry.define()`](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define)
/// method).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:defined)
pub fn defined(styles: List(Style)) -> Style {
  selector(":defined", styles)
}

/// The `:empty` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any element that has no children. Children can be either element
/// nodes or text (including whitespace). Comments, processing instructions, and
/// CSS [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/content) do
/// not affect whether an element is considered empty.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:empty)
pub fn empty(styles: List(Style)) -> Style {
  selector(":empty", styles)
}

/// The `:fullscreen` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches every element that is currently in fullscreen mode. If multiple
/// elements have been put into fullscreen mode, this selects them all.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:fullscreen)
pub fn fullscreen(styles: List(Style)) -> Style {
  selector(":fullscreen", styles)
}

/// The `:in-range` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// element whose current value is within the range limits specified by the
/// [`min`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
/// and [`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
/// attributes.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:in-range)
pub fn in_range(styles: List(Style)) -> Style {
  selector(":in-range", styles)
}

/// The `:indeterminate` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any form element whose state is indeterminate, such as checkboxes
/// that have been set to an [`indeterminate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/indeterminate)
/// state with JavaScript, radio buttons which are members of a group in which
/// all radio buttons are unchecked, and
/// [`<progress>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)
/// elements with no value attribute.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:indeterminate)
pub fn indeterminate(styles: List(Style)) -> Style {
  selector(":indeterminate", styles)
}

/// The `:muted` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents an element that is capable of making sound, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)
/// or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// but is muted (forced silent).
///
/// Muted is different from [`:volume-locked`](https://developer.mozilla.org/en-US/docs/Web/CSS/:volume-locked)
/// in that the page author has control over whether a media element can be
/// muted or un-muted. User agents may set media `muted` value according to use
/// preferences (e.g., remembering the last set value across sessions, on a
/// per-site basis, or otherwise). An element that is `:volume-locked` cannot
/// be muted, un-muted, or have its volume changed via JavaScript because of an
/// operating system or user agent preference.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:muted)
pub fn muted(styles: List(Style)) -> Style {
  selector(":muted", styles)
}

/// The `:paused` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents an element that is playable, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) or
/// [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// when that element is "paused" (i.e. not "playing").
///
/// A resource is paused if the user explicitly paused it, or if it is in a
/// non-activated or other non-playing state, like "loaded, hasn't been activated yet".
/// This is different from `:buffering` or `:stalled`, which are states that
/// occur while the resource is considered "playing".
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:paused)
pub fn paused(styles: List(Style)) -> Style {
  selector(":paused", styles)
}

/// The `:playing` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents the playback state of an element that is playable, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) or
/// [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// when that element is "playing". An element is considered to be playing if
/// it is currently playing the media resource, or if it has temporarily stopped
/// for reasons other than user intent (such as `:buffering` or `:stalled`).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:playing)
pub fn playing(styles: List(Style)) -> Style {
  selector(":playing", styles)
}

/// The `:seeking` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element that is playable, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) or
/// [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// when the playable element is seeking a playback position in the media resource.
/// A resource is considered to be seeking if the user has requested playback of
/// a specific position in the media resource, but the media element has not yet
/// reached that position.
///
/// Seeking is different from `:buffering` in that the media element is not
/// currently loading data, but is instead skipping to a new position in the
/// media resource. For more information, see the
/// [Media buffering, seeking, and time ranges](https://developer.mozilla.org/en-US/docs/Web/Media/Audio_and_video_delivery/buffering_seeking_time_ranges#seekable)
/// guide.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:seeking)
pub fn seeking(styles: List(Style)) -> Style {
  selector(":seeking", styles)
}

/// The `:stalled` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element that is playable, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) or
/// [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// when playback is stalled. A resource is considered to be stalled if the user
/// has requested playback of a specific position in the media resource, but it
/// has failed to receive any data for some amount of time. This is different
/// from `:buffering` in that the media element is unexpectedly not loading data
/// when stalled (e.g. due to a network error) for around 3 seconds (the exact time
/// is [user agent dependent](https://html.spec.whatwg.org/multipage/media.html#stall-timeout)).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:stalled)
pub fn stalled(styles: List(Style)) -> Style {
  selector(":stalled", styles)
}

/// The `:state()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches [custom elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements)
/// that have the specified custom state.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:state)
pub fn state(content: String, styles: List(Style)) -> Style {
  selector(":state(" <> content <> ")", styles)
}

/// The `:user-invalid` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any validated form element whose value isn't valid based on
/// [their validation constraints](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation),
/// after the user has interacted with it.
///
/// The `:user-invalid` pseudo-class must match an `:invalid`, `:out-of-range`,
/// or blank-but `:required` element between the time the user has attempted to
/// submit the form and before the user has interacted again with the form
/// element.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:user-invalid)
pub fn user_invalid(styles: List(Style)) -> Style {
  selector(":user-invalid", styles)
}

/// The `:user-valid` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any validated form element whose value validates correctly based on its
/// [their validation constraints](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation).
/// However, unlike `:valid` it only matches once the user has interacted with it.
///
/// This pseudo-class is applied if the form control is valid and any of the
/// following has occurred:
/// - The user made a change to the form control and committed the change such
///   as by moving focus elsewhere.
/// - The user has attempted to submit the form, even if no change was made to
///   the control.
/// - The value was invalid when it gained focus, and the user made a change
///   making it valid, even if focus is still in the control.
///
/// Once this pseudo-class has been applied, the user-agent re-validates whether
/// the control is valid at every keystroke when the control has focus.
/// - If the control has focus, and the value was invalid when it gained focus,
///   re-validate on every keystroke.
/// The result is that if the control was valid when the user started
/// interacting with it, the validity styling is changed only when the user
/// shifts focus to another control. However, if the user is /// trying to
/// correct a previously-flagged value, the control shows immediately when the
/// value becomes valid. Required items are flagged as invalid only if the user
/// changes them or attempts to submit an unchanged invalid value.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:user-valid)
pub fn user_valid(styles: List(Style)) -> Style {
  selector(":user-valid", styles)
}

/// The `:volume-locked` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents an element that is capable of making sound, such as
/// [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)
/// or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video),
/// but the audio volume of the media element is currently "locked" by the user.
///
/// User agents may set media `muted` or `volume` values according to user
/// preferences (e.g., remembering the last set value across sessions, on a
/// per-site basis, or otherwise). An element that is `:volume-locked` cannot
/// be volume-locked, un-volume-locked, or have its volume changed via JavaScript because of an
/// operating system or user agent preference.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:volume-locked)
pub fn volume_locked(styles: List(Style)) -> Style {
  selector(":volume-locked", styles)
}

/// The `:placeholder-shown` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
/// element that is currently
/// [displaying placeholder text](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:placeholder-shown)
pub fn placeholder_shown(styles: List(Style)) -> Style {
  selector(":placeholder-shown", styles)
}

/// The `:out-of-range` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// element whose current value is outside the range limits specified by the
/// [`min`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
/// and [`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
/// attributes.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:out-of-range)
pub fn out_of_range(styles: List(Style)) -> Style {
  selector(":out-of-range", styles)
}

/// The `:dir()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches elements based on the directionality of the text contained in them.
///
/// ```css
/// /* Selects any element with right-to-left text */
/// :dir(rtl) {
///   background-color: red;
/// }
/// ```
/// The `:dir()` pseudo-class uses only the _semantic_ value of the
/// directionality, i.e., the one defined in the document itself. It doesn't
/// account for _styling_ directionality, i.e., the directionality set by CSS
/// properties such as direction.
///
/// > Be aware that the behavior of the `:dir()` pseudo-class is not equivalent
/// > to the `[dir=…]` attribute selectors. The latter match the HTML `dir`
/// > attribute, and ignore elements that lack it — even if they inherit a
/// > direction from their parent. (Similarly, `[dir=rtl]` and `[dir=ltr]` won't
/// > match the `auto` value.) In contrast, `:dir()` will match the value
/// > calculated by the user agent, even if inherited.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:out-of-range)
pub fn dir(direction: String, styles: List(Style)) -> Style {
  selector(":dir(" <> direction <> ")", styles)
}

/// The `:focus-visible` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// applies while an element matches the `:focus` pseudo-class and the User Agent
/// determines via heuristics that the focus should be made evident on the element.
/// (Many browsers show a "focus ring" by default in this case.)
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:focus-visible)
pub fn focus_visible(styles: List(Style)) -> Style {
  selector(":focus-visible", styles)
}

/// The `:focus-within` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches an element if the element or any of its descendants are focused.
/// In other words, it represents an element that is itself matched by the
/// `:focus` pseudo-class or has a descendant that is matched by `:focus`.
/// (This includes descendants in [shadow trees](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM).)
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:focus-within)
pub fn focus_within(styles: List(Style)) -> Style {
  selector(":focus-within", styles)
}

/// The `:enabled` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any enabled element. An element is enabled if it can be activated
/// (selected, clicked on, typed into, etc.) or accept focus. The element also
/// has a disabled state, in which it can't be activated or accept focus.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:enabled)
pub fn enabled(styles: List(Style)) -> Style {
  selector(":enabled", styles)
}

/// The `:disabled` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any disabled element. An element is disabled if it can't be
/// activated (selected, clicked on, typed into, etc.) or accept focus. The
/// element also has an enabled state, in which it can be activated or accept
/// focus.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:disabled)
pub fn disabled(styles: List(Style)) -> Style {
  selector(":disabled", styles)
}

/// The `:read-only` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selects elements (such as certain [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// types and [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea))
/// that are not editable by the user. Elements on which the HTML attribute
/// readonly doesn't have an effect (such as
/// [`<input type="radio">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio),
/// [`<input type="checkbox">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox),
/// and all other non-form elements) are also selected by the `:read-only`
/// pseudo-class. In fact, `:read-only` matches anything that `:read-write`
/// doesn't match, making it equivalent to `:not(:read-write)`.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:read-only)
pub fn read_only(styles: List(Style)) -> Style {
  selector(":read-only", styles)
}

/// The `:read-write` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element (such as [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea))
/// that is editable by the user.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:read-write)
pub fn read_write(styles: List(Style)) -> Style {
  selector(":read-write", styles)
}

/// The `:checked` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// selector represents any radio ([`<input type="radio">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio)),
/// checkbox ([`<input type="checkbox">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)), or
/// option ([`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option) in a
/// [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select))
/// element that is checked or toggled to an `on` state.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:checked)
pub fn checked(styles: List(Style)) -> Style {
  selector(":checked", styles)
}

/// The `:valid` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
/// or other [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)
/// element whose contents [validate](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation)
/// successfully. This allows to easily make valid fields adopt an appearance
/// that helps the user confirm that their data is formatted properly.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:valid)
pub fn valid(styles: List(Style)) -> Style {
  selector(":valid", styles)
}

/// The `:invalid` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form),
/// [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset),
/// [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) or
/// other [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)
/// element whose contents fail to [validate].
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:invalid)
pub fn invalid(styles: List(Style)) -> Style {
  selector(":invalid", styles)
}

/// The `:required` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input),
/// [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) or
/// [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
/// element that has the `required` attribute set on it.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:required)
pub fn required(styles: List(Style)) -> Style {
  selector(":required", styles)
}

/// The `:optional` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents any [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input),
/// [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) or
/// [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
/// element that has the `optional` attribute set on it.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:optional)
pub fn optional(styles: List(Style)) -> Style {
  selector(":optional", styles)
}

/// The `:link` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element that has not yet been visited. It matches every unvisited
/// [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) or
/// [`<area>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)
/// element that has an href attribute.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:link)
pub fn link(styles: List(Style)) -> Style {
  selector(":link", styles)
}

/// The `:visited` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// applies once the link has been visited by the user. For privacy reasons,
/// the styles that can be modified using this selector are very limited.
/// The `:visited` pseudo-class applies only to
/// [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) and
/// [`<area>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)
/// elements that have an href attribute.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:visited)
pub fn visited(styles: List(Style)) -> Style {
  selector(":visited", styles)
}

/// The `:target` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents a unique element (the target element) with an `id` matching the
/// URL's fragment.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:target)
pub fn target(styles: List(Style)) -> Style {
  selector(":target", styles)
}

/// The `:nth-child()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches elements based on the indexes of the elements in the child list of
/// their parents. In other words, the `:nth-child()` selector selects child
/// elements according to their position among all the sibling elements
/// within a parent element.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:nth-child)
pub fn nth_child(sel: String, styles: List(Style)) -> Style {
  selector(string.append(":nth-child", sel), styles)
}

/// The `:nth-last-child()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches elements based on their position among a group of siblings, counting
/// from the end.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:nth-last-child)
pub fn nth_last_child(sel: String, styles: List(Style)) -> Style {
  selector(string.append(":nth-last-child", sel), styles)
}

/// The `:nth-of-type()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches elements based on their position among siblings of the same type
/// (tag name).
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:nth-of-type)
pub fn nth_of_type(sel: String, styles: List(Style)) -> Style {
  selector(string.append(":nth-of-type", sel), styles)
}

/// The `:nth-last-of-type()` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// matches elements based on their position among siblings of the same type
/// (tag name), counting from the end.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:nth-last-of-type)
pub fn nth_last_of_type(sel: String, styles: List(Style)) -> Style {
  selector(string.append(":nth-last-of-type", sel), styles)
}

/// The `:first-child` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents the first element among a group of sibling elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:first-child)
pub fn first_child(styles: List(Style)) -> Style {
  selector(":first-child", styles)
}

/// The `:last-child` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents the last element among a group of sibling elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:last-child)
pub fn last_child(styles: List(Style)) -> Style {
  selector(":last-child", styles)
}

/// The `:only-child` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element without any siblings. This is the same as
/// `:first-child:last-child` or `:nth-child(1):nth-last-child(1)`,
/// but with a lower specificity.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:only-child)
pub fn only_child(styles: List(Style)) -> Style {
  selector(":only-child", styles)
}

/// The `:first-of-type` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents the first element of its type among a group of sibling elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:first-of-type)
pub fn first_of_type(styles: List(Style)) -> Style {
  selector(":first-of-type", styles)
}

/// The `:last-of-type` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents the last element of its type among a group of sibling elements.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:last-of-type)
pub fn last_of_type(styles: List(Style)) -> Style {
  selector(":last-of-type", styles)
}

/// The `:only-of-type` CSS
/// [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)
/// represents an element that has no siblings of the same type.
///
/// [MDN Documentation](https://developer.mozilla.org/docs/Web/CSS/:only-of-type)
pub fn only_of_type(styles: List(Style)) -> Style {
  selector(":only-of-type", styles)
}

/// Create an arbitrary selector. Every selector will be appended at the end of
/// the class name selector.
///
/// ```gleam
/// pub fn my_class() {
///   css.class([
///     css.selector(":not(:disabled)", [
///       css.background("red"),
///     ]),
///   ])
/// }
/// ```
///
/// Will output
///
/// ```css
/// .my_class {}
/// .my_class:not(:disabled) {
///   background: red;
/// }
/// ```
pub fn selector(value: String, styles: List(Style)) -> Style {
  style.Selector(value, styles)
}

// Combinators

/// The child combinator (`>`) is placed between two CSS selectors. It matches
/// only those elements matched by the second selector that are the direct
/// children of elements matched by the first.
///
/// ```css
/// /* List items that are children of the "my-things" list */
/// ul.my-things > li {
///   margin: 2em;
/// }
/// ```
///
/// Elements matched by the second selector must be the immediate children of
/// the elements matched by the first selector. This is stricter than the
/// [descendant combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator),
/// which matches all elements /// matched by the second selector for which
/// there exists an ancestor element matched by the first selector, regardless
/// of the number of "hops" up the DOM.
///
/// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator)
pub fn child(class: Class, styles: List(Style)) -> Style {
  style.Combinator(" > ", class, styles)
}

/// The descendant combinator — typically represented by a single space (" ")
/// character — combines two selectors such that elements matched by the second
/// selector are selected if they have an ancestor (parent, parent's parent,
/// parent's parent's parent, etc.) element matching the first selector.
/// Selectors that utilize a descendant combinator are called descendant
/// selectors.
///
/// ```css
/// /* List items that are descendants of the "my-things" list */
/// ul.my-things li {
///   margin: 2em;
/// }
/// ```
///
/// The descendant combinator is technically one or more CSS white space
/// characters — the space character and/or one of four control characters:
/// carriage return, form feed, new line, and tab characters — between two
/// selectors in the absence of another combinator. Additionally, the white
/// space characters of which the combinator is comprised may contain any number
/// of CSS comments.
///
/// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator)
pub fn descendant(class: Class, styles: List(Style)) -> Style {
  style.Combinator(" ", class, styles)
}

/// The next-sibling combinator (`+`) separates two selectors and matches the
/// second element only if it immediately follows the first element, and both
/// are children of the same parent [element](https://developer.mozilla.org/en-US/docs/Web/API/Element).
///
/// ```css
/// /* Paragraphs that come immediately after any image */
/// img + p {
///   font-weight: bold;
/// }
/// ```
///
/// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Next-sibling_combinator)
pub fn next_sibling(class: Class, styles: List(Style)) -> Style {
  style.Combinator(" + ", class, styles)
}

/// The subsequent-sibling combinator (`~`, a tilde) separates two selectors
/// and matches all instances of the second element that follow the first
/// element (not necessarily immediately) and share the same parent element.
///
/// In the following example, the subsequent-sibling combinator (`~`) helps to
/// select and style paragraphs that are both siblings of an image and appear
/// after any image.
///
/// ```css
/// img ~ p {
///   color: red;
/// }
/// ```
///
/// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Subsequent-sibling_combinator)
pub fn subsequent_sibling(class: Class, styles: List(Style)) -> Style {
  style.Combinator(" ~ ", class, styles)
}

/// Add an `!important` flag to any CSS property.
/// It won't have any effect on non-property style, like media, etc. It will
/// then act as the `identity` function.
///
/// ```gleam
/// pub fn my_class() {
///   css.class([
///     css.background("red"),
///     css.padding(px(10)) |> css.important,
///   ])
/// }
/// ```
///
/// Will output
///
/// ```css
/// .my_class {
///   background: red;
///   padding: 10px !important;
/// }
/// ```
///
/// [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/important)
pub fn important(style: Style) -> Style {
  case style {
    style.Property(key, value, _) -> style.Property(key, value, True)
    any -> any
  }
}

/// Compose styles by inheriting class, and later overrides them.
/// Every styles from the class will be composed in the resulting class.
/// Order is important, as last properties will override previous properties.
///
/// ```gleam
/// pub fn my_class1() {
///   css.class([
///     css.background("red"),
///   ])
/// }
///
/// pub fn my_class2() {
///   css.class([
///     css.padding(px(10)),
///     css.color("red"),
///   ])
/// }
///
/// pub fn my_class() {
///   css.class([
///     css.compose(my_class1()),
///     css.compose(my_class2()),
///     css.padding(px(20)),
///   ])
/// }
/// ```
///
/// Will output
///
/// ```css
/// .my_class {
///   background: red;
///   color: red;
///   padding: 20px;
/// }
/// ```
pub fn compose(class: Class) -> Style {
  style.ClassName(class)
}
